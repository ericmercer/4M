               (let ([stopped-state (step-threads-to-blocked curr-state)])
                 (if (unblocked-thread? (machine-state-user-ts stopped-state) waiting-ts)
                     ; Threads were unblocked without daemons
                     (handle-next-state stopped-state)
                     ; Try stepping daemons
                     (let ([daemon-states
                            (for/fold ([states empty]) ([daemon-tid (shuffle daemon-tids)])
                              (append (full-step-daemon stopped-state daemon-tid) states))])
                       (when (empty? daemon-states) (eprintf "ERROR: NO DAEMON STATES FOUND!~n"))
                       (let ()
                         (define next-states
                           (shuffle
                            (for/fold ([next-states empty]) ([daemon-state (in-list daemon-states)])
                              (append (sequence->list (in-relation (machine-reductions-for-thread 'all 'none) daemon-state)) next-states))))
                         (if (empty? next-states)
                             (if (= sleeping-ts 0)
                                 (begin
                                   #;(eprintf "Threads: ~a~nDaemons: ~a~n" (machine-state-user-ts curr-state) (machine-state-daemon-ts curr-state))
                                   #;(eprintf "Sigma ~a~n" (machine-state-sigma curr-state))
                                   (eprintf "Reached empty state\n")
                                   (send-msg "DIE\n"))
                                 (begin ; GEM should wake a sleeping thread if possible
                                   (send-msg "CONTINUE\n")
                                   (loop curr-state tracked-addrs how-many-ts waiting-ts))) 
                             (parameterize ([first-run? #t])
                               (for ([n-state (in-list (if single-run? (list (first next-states)) next-states))])
                                 ; We parameterize these so that the values are correct when we rewind
                                 (parameterize ([sigma-next-index (sigma-next-index)]
                                                [total-answer-size (total-answer-size)]) ; total-answer-size would probably be better as an argument in loop
                                   (unless (first-run?) (read-replay tid c-req debug-mode?))
                                   (handle-next-state n-state))
                                 (first-run? #f)
                                 )))))))
