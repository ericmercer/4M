CC=gcc
CFLAGS=-g -Wall -Wno-deprecated-declarations

GEM_PATH=../../src/wrapper/
FSPECC=../../bin/fspecc
SPEC_PATH=../mcapi.fspec
SPEC_COMPILED=../.mcapi.fspec.rktd
INCS=-I$(GEM_PATH) -I$(GEM_PATH)structs/
CFILES=$(GEM_PATH)gem.c $(GEM_PATH)gem_util.c mcapi.c $(GEM_PATH)gem_vars.c $(GEM_PATH)gem_config.c
CFILES+= $(GEM_PATH)gem_thread.c $(GEM_PATH)gem_context.c $(GEM_PATH)structs/rb.c

ifneq (,$(findstring MINGW,$(shell uname)))
INCS+= -I$(GEM_PATH)win32/
CFILES+= $(GEM_PATH)gem_win32.c $(GEM_PATH)win32/ucontext.c
else
CFILES+= $(GEM_PATH)gem_posix.c
CFLAGS+= -D_GNU_SOURCE -D_XOPEN_SOURCE
endif

all: selfsend twosends tophscen nonblocking non-block-topher $(SPEC_COMPILED) gemConfig gemDriver leader

clean:
	make -C $(GEM_PATH) clean
	rm -f ordertest
	rm -f selfsend
	rm -f twosends
	rm -f tophscen
	rm -f nonblocking
	rm -f jp
	rm -f leader

test: all
	./selfsend
	./twosends
	./tophscen
	./nonblocking

ordertest: $(CFILES) ordertest.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

selfsend: $(CFILES) selfsend.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

twosends: $(CFILES) twosends.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

non-block-topher: $(CFILES) non-block-topher.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

tophscen: $(CFILES) tophscen.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

nonblocking: $(CFILES) nonblocking.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

leader: $(CFILES) leader.c
	$(CC) $(CFLAGS) $(INCS) $^ -o $@

jp: $(CFILES) jp_mp.c
	$(CC) -O0 $(CFLAGS) $(INCS) $^ -o $@

router: $(CFILES) router.c
	$(CC) -O0 $(CFLAGS) $(INCS) $^ -o $@

$(SPEC_COMPILED): fspecc $(SPEC_PATH)
	$(FSPECC) -t redex -o $@ $^

fspecc: ../../obj/fspecc/FSpecCompiler.class
../../obj/fspecc/FSpecCompiler.class:
	@echo ERROR: The MCAPI FSpec needs the FSpec compiler to be built first.
	exit 1

gemConfig:
	@echo -e 'mode=SINGLE\ndebug=OFF\n#seed=35AE' > gemConfig
	@echo 'Created sample gemConfig file.'

gemDriver:
	make -C $(GEM_PATH)
	cp $(GEM_PATH)gem_driver gem_driver

